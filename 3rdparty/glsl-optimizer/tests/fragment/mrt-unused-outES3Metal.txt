#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  half4 xlv_COLOR0;
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
  float4 _Color;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 c_1;
  float4 tmpvar_2;
  tmpvar_2 = ((float4)_mtl_i.xlv_COLOR0 * _mtl_u._Color);
  c_1 = half4(tmpvar_2);
  _mtl_o._glesFragData_0 = c_1;
  return _mtl_o;
}


// stats: 1 alu 0 tex 0 flow
// inputs: 1
//  #0: xlv_COLOR0 (low float) 4x1 [-1]
// uniforms: 1 (total size: 16)
//  #0: _Color (high float) 4x1 [-1] loc 0
