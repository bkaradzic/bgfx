#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
};
struct xlatMtlShaderOutput {
  half4 _fragData [[color(0)]];
};
struct xlatMtlShaderUniform {
  float4x3 nonSqMat;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 v_1;
  v_1.w = half(-1.0);
  v_1.x = ((half)(1.2 + _mtl_u.nonSqMat[0].x));
  v_1.y = half(6.0);
  v_1.z = half(4.0);
  _mtl_o._fragData = v_1;
  return _mtl_o;
}


// stats: 4 alu 0 tex 0 flow
// uniforms: 1 (total size: 64)
//  #0: nonSqMat (high float) 3x4 [-1] loc 0
