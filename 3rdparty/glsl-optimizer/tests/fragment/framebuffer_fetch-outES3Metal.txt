#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
  half4 xlv_TEXCOORD0;
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderOutput {
  half4 _glesFragData_0 [[color(0)]];
};
struct xlatMtlShaderUniform {
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 xlt_ocol_1;
  xlt_ocol_1 = _mtl_i._glesFragData_0;
  half4 ocol_2;
  ocol_2.w = xlt_ocol_1.w;
  ocol_2.xy = _mtl_i.xlv_TEXCOORD0.xy;
  ocol_2.z = (xlt_ocol_1.z * (half)2.0);
  xlt_ocol_1 = ocol_2;
  _mtl_o._glesFragData_0 = ocol_2;
  return _mtl_o;
}


// stats: 1 alu 0 tex 0 flow
// inputs: 1
//  #0: xlv_TEXCOORD0 (low float) 4x1 [-1]
