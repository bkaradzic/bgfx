#include <metal_stdlib>
using namespace metal;
struct xlatMtlShaderInput {
};
struct xlatMtlShaderOutput {
  half4 _fragData [[color(0)]];
};
struct xlatMtlShaderUniform {
  half4x4 _LightMatrix;
  float3 _WorldPos;
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  half4 r_1;
  half3 lightCoord_2;
  float4 tmpvar_3;
  tmpvar_3.w = 1.0;
  tmpvar_3.xyz = _mtl_u._WorldPos;
  float3 tmpvar_4;
  tmpvar_4 = ((float4)(_mtl_u._LightMatrix * (half4)tmpvar_3)).xyz;
  lightCoord_2 = half3(tmpvar_4);
  r_1.xyz = lightCoord_2;
  r_1.w = half(1.0);
  _mtl_o._fragData = r_1;
  return _mtl_o;
}


// stats: 3 alu 0 tex 0 flow
// uniforms: 2 (total size: 48)
//  #0: _LightMatrix (medium float) 4x4 [-1] loc 0
//  #1: _WorldPos (high float) 3x1 [-1] loc 32
